//This example uses a generated makefile to compile itself
package main

import (
	"fmt"
	"os"

	makefile "github.com/panux/go-makefile"
)

var notice = `
AUTOGENERATED DO NOT EDIT
To regenerate run 'make'
`

func chkerr(err error) {
	if err != nil {
		panic(err)
	}
}

func main() {
	f, err := os.OpenFile("self.mk", os.O_WRONLY|os.O_CREATE, 0700)
	chkerr(err)
	defer f.Close()
	w := makefile.NewWriter(f)
	defer w.Close()
	_, err = w.Write([]byte("#!/usr/bin/make"))
	chkerr(err)
	chkerr(w.BlankLine())
	chkerr(w.WriteComment(notice))
	chkerr(w.BlankLine())
	chkerr(w.WriteVar("GOBIN", []string{"go"}))
	chkerr(w.WriteVar("GOPATH", []string{fmt.Sprintf("%s/gopath", makefile.ShellSub("pwd"))}))
	chkerr(w.WriteVar("GOGET", []string{makefile.VarSub("GOBIN"), "get"}))
	chkerr(w.WriteVar("GOBUILD", []string{makefile.VarSub("GOBIN"), "build"}))
	chkerr(w.QuickRule(
		makefile.VarSub("GOPATH"), nil,
		[]string{fmt.Sprintf("mkdir %s", makefile.VarSub("GOPATH"))},
	))
	chkerr(w.QuickRule(".godeps", []string{makefile.VarSub("GOPATH")}, []string{
		makefile.Print("Fetching dependencies"),
		makefile.NoPrint(
			fmt.Sprintf("GOPATH=%s %s github.com/panux/go-makefile",
				makefile.VarSub("GOPATH"),
				makefile.VarSub("GOGET"),
			),
		),
	}))
	chkerr(w.QuickRule("self.o", []string{".godeps", "self.go"}, []string{
		makefile.Print("Building self.o"),
		makefile.NoPrint(
			fmt.Sprintf("GOPATH=%s %s -o self.o self.go",
				makefile.VarSub("GOPATH"),
				makefile.VarSub("GOBUILD"),
			),
		),
	}))
	chkerr(w.QuickRule("self.mk", []string{"self.o"}, []string{
		makefile.Print("Regenerating makefile"),
		makefile.NoPrint("./self.o"),
	}))
}
